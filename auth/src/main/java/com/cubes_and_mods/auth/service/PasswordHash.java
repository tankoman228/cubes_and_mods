package com.cubes_and_mods.auth.service;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Random;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ö–µ—à–∏—Ä–æ–≤–∞—Ç–µ–ª—å –ø–∞—Ä–æ–ª–µ–π, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–µ–π
 * 
 * –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—Å–æ–±–æ–π —Å–æ–ª—å—é, –∑–∞—â–∏—â–∏–∞–µ—Ç –æ—Ç –≤—Å–µ–≥–æ –±–ª–∏–∑–∫–æ–≥–æ –∫ —Ä–∞–¥—É–∂–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
 * –°–æ–ª—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã
 * */
@Component
public class PasswordHash {
		
	@Deprecated
    public static String hash(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hashBytes = md.digest(password.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : hashBytes) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

	@Deprecated
    public static boolean checkhash(String hash, String password) {
        return hash(password).equals(hash);
    }
	
	public PasswordHash() {
		
	}
    
    public static boolean TEST_HASH() {
         
    	var PasswordHash = new PasswordHash();
    	
    	boolean good = true;
    	
    	String pwd = "123";
    	int id = 12;
    	
    	for (int i = 0; i < 2; i++) {
    		good = good && PasswordHash.checkHash(PasswordHash.hash(pwd + i, id + i), pwd + i, id + i);
    		//System.out.println(i + " " + good);
    		//System.out.println(PasswordHash.hash(pwd + i, id + i));
    	}	
    	
    	return good;
    }
	
	@Value("#{new Long('${salt-modifier}')}")
	private Long salt_modifier = 3000L; // –ù–∞ –ø—Ä–∞–∫—Ç–∏–∏–∫–µ –±–æ–ª—å—à–æ–µ –∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ
	
	public String hash(String password_, int id_user) {
		
		// –°–∞–º—ã–π —Å–æ–ª–µ–≤–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤ –º–∏—Ä–µ
		// –ö—Å—Ç–∞—Ç–∏, –≤—Å–µ –ø–∞—Ä–æ–ª–∏ –±—É–¥—É—Ç –≤–µ—Å—å–º–∞ –±–æ–ª—å—à–∏–º–∏ –∏ —Å–ª–æ–∂–Ω—ã–º–∏, —É–¥–∞—á–∏ –≤–æ –≤–∑–ª–æ–º–µ —Ä–∞–¥—É–∂–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏
		// —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –¥–∞—Å—Ç –∑–∞—Ä–µ–≥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å, –∑–∞–ø–∞—Å–∞–π—Å—è –∫–≤–∞–Ω—Ç–æ–≤—ã–º–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º–∏
		
		long salt_seed = id_user * id_user * 11 / 2 + salt_modifier;
		Random random = new Random(salt_seed + password_.length());
		random = new Random(salt_seed);
		
		String salt = sha256(String.valueOf(random.nextInt() + password_.length()));
		salt = makeSalt(salt + password_, salt_modifier % 13 + 100);
		
		// –®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è-–¢–∞—Ç—ã—Ä–∂–∏ –ø–æ –ø—Ä–∏–∫–æ–ª—É
		String pwd = "";
		String bibki = sha256(salt + password_.toLowerCase());
		for (int i = bibki.length()-1; i > 0; i--) {
			pwd += (char)((int)bibki.charAt(i) + salt_modifier);
			if (random.nextBoolean()) {
				pwd += (char)((int)bibki.charAt(i) - salt_modifier);
			}
		}
		
		var p = (sha256(password_ + pwd + salt) + bibki).replace("f", "ü§ì");
		
		//System.out.println(password_ + " " + p);
		
		return p;
	}
	
    private String makeSalt(String salt, long iterations) {
    	
    	if (iterations == 0)
    		return salt;
    	
    	return makeSalt(sha256(salt), iterations-1);
    }
	
    private String sha256(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hashBytes = md.digest(password.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : hashBytes) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }
	
    public boolean checkHash(String hash, String password, int id_user) {    
    	return hash.equals(this.hash(password, id_user));
    }
    

}
