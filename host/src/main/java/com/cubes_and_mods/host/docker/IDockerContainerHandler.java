package com.cubes_and_mods.host.docker;

import com.cubes_and_mods.host.jpa.*;

/**
 * Позволяет разворачивать для хостов клиентов докер-контейнеры, а также
 * выполнять управление игровыми серверами посредством вызова методов 
 * интерфейса из кода HTTP запросов и веб-сокетов.
 * 
 * Может развернуть докер, свернуть (удалить), управлять файлами игрового сервера,
 * делать простейший мониторинг для рантайма (см. класс HostRuntimeObserver), 
 * запускать игровые сервера, работать с вводом выводам и даёт все данные для
 * SSH подключения к контейнеру
 * 
 * В курсовом был IMinecraftHandler, но для безопасности и большего функционала расширен.
 * */
public interface IDockerContainerHandler {

	/**
	 * true, если найдёт контейнер докера для игрового сервера и он работает исправно.
	 * Если false - потребцется выполнить InitOrUpdate, иначе работать не будет
	 * */
	boolean ContainerFound();
	
	/**
	 * Создаёт новый контейнер для хоста или обновляет существующий согласно тарифу
	 * */
	void InitOrUpdate(Tariff tariff);
	
	/**
	 * Удаляет контейнер для текущего хоста, после него ContainerFound() вернёт false
	 * */
	void DeleteContainer();
	
	/**
	 * Статус длительных операций, null, если операций не было. 
	 * К длительным операциям относят методы для работы с Docker,
	 * бекапами и автоустановку игровых серверов
	 * */
	OperationStatus currentOperationStatus();
	
	/**
	 * Пароль для SSH подключений к хосту
	 * */
	String SSHPassword();
	
	/**
	 * Адрес для SSH подключений к хосту
	 * */
	String SSHIpPort();
	
	/**
	 * Порты, на которых может биндиться игровой сервер (2 элемента) 
	 * */
	int[] allowedPorts();


	/**
	 * Установлен ли игровой сервер? Проверит только при автоустановке
	 * */
	boolean GameServerInstalled();
	
	/**
	 * Установит игровой сервер автоматически по BLOB'у в версии
	 * */
	void InstallGameServer(Version version);
	
	/**
	 * Создаст файл бекапа игрового сервера (только при автоустановке)
	 * */
	void CreateBackup(Backup backup);
	
	/**
	 * Найдёт файл бекаап игрового сервера и откатит его (только при автоустановке)
	 * */
	void RollbackTo(Backup backup);
	
	/**
	 * Удалит файл бекапа игрового сервера (только при автоустановке)
	 * */
	void RemoveBackup(Backup backup);
	
	/**
	 * Какая доля занята файлами в контейнере? Вернёт значение от 0 до 1 
	 * */
	double GetMemory();
	
	
	/**
	 * Автопроверка контейнера. Если там идёт какой-то процесс, вернёт true (игровой сервер или что-то тяжёлое)
	 * */
	boolean IsGameServerRunning();
	
	/**
	 * Автозапуск игрового сервера
	 * */
	void startServerByRunSh();
	
	/**
	 * 
	 * */
	void killServerProcess();
	
	/**
	 * Подписка для проксирования консоли игрового сервера, игра вызывает методы fromGame, ваша задача вывести их клиенту
	 * */
	void SubscribeInputOutput(IGameServerConsoleOutput gameServerConsole);
	interface IGameServerConsoleOutput {
		void fromGameMessage(String msg);
		void fromGameError(String msg);
	}
	
	/**
	 * Отправит на ввод в консоль игрового сервера
	 * */
	void sendMessageToServer(String msg);
	
	
	/**
	 * Вывод имён всех файлов и директорий из текущего пути. Передать "/" для директории
	 * с run.sh и основными файлами
	 * */
	FileInfo getFiles(String path);
	
	/**
	 * Вывод имён всех файлов и директорий из текущего пути, включая все подпути, то есть
	 * получение всего фалового дерева
	 * */
	FileInfo getFilesRecusive(String path);
	
	/**
	 * Считывает содержимое файла в массив байтов. Аккуратно, для больших лучше FTP, 
	 * вызывать этот метод эффективно только для файлов конфигурации и модов на майнкрафт
	 * */
	FileInfo readFileBytes(String path);
	
	/**
	 * Записывает файл или заменяет содержимое файла из массива байтов. 
	 * Аккуратно, для больших файлов лучше FTP, вызывать метод 
	 * эффективно только для файлов конфигурации и модов на майнкрафт
	 * */
	void uploadFile(FileInfo file);
}
